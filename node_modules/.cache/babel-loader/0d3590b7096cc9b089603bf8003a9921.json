{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport var mathFlow = {\n  tokenize: tokenizeMathFenced,\n  concrete: true\n};\n/** @type {Construct} */\n\nvar nonLazyLine = {\n  tokenize: tokenizeNonLazyLine,\n  partial: true\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeMathFenced(effects, ok, nok) {\n  var self = this;\n  var tail = self.events[self.events.length - 1];\n  var initialSize = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  var sizeOpen = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('mathFlow');\n    effects.enter('mathFlowFence');\n    effects.enter('mathFlowFenceSequence');\n    return sequenceOpen(code);\n  }\n  /** @type {State} */\n\n\n  function sequenceOpen(code) {\n    if (code === 36) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n\n    effects.exit('mathFlowFenceSequence');\n    return sizeOpen < 2 ? nok(code) : factorySpace(effects, metaOpen, 'whitespace')(code);\n  }\n  /** @type {State} */\n\n\n  function metaOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('mathFlowFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n  /** @type {State} */\n\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('mathFlowFenceMeta');\n      return openAfter(code);\n    }\n\n    if (code === 36) return nok(code);\n    effects.consume(code);\n    return meta;\n  }\n  /** @type {State} */\n\n\n  function openAfter(code) {\n    effects.exit('mathFlowFence');\n    return self.interrupt ? ok(code) : contentStart(code);\n  }\n  /** @type {State} */\n\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(nonLazyLine, effects.attempt({\n        tokenize: tokenizeClosingFence,\n        partial: true\n      }, after, initialSize ? factorySpace(effects, contentStart, 'linePrefix', initialSize + 1) : contentStart), after)(code);\n    }\n\n    effects.enter('mathFlowValue');\n    return contentContinue(code);\n  }\n  /** @type {State} */\n\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('mathFlowValue');\n      return contentStart(code);\n    }\n\n    effects.consume(code);\n    return contentContinue;\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    effects.exit('mathFlow');\n    return ok(code);\n  }\n  /** @type {Tokenizer} */\n\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0;\n    return factorySpace(effects, closingPrefixAfter, 'linePrefix', 4);\n    /** @type {State} */\n\n    function closingPrefixAfter(code) {\n      effects.enter('mathFlowFence');\n      effects.enter('mathFlowFenceSequence');\n      return closingSequence(code);\n    }\n    /** @type {State} */\n\n\n    function closingSequence(code) {\n      if (code === 36) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n\n      if (size < sizeOpen) return nok(code);\n      effects.exit('mathFlowFenceSequence');\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code);\n    }\n    /** @type {State} */\n\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('mathFlowFence');\n        return ok(code);\n      }\n\n      return nok(code);\n    }\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeNonLazyLine(effects, ok, nok) {\n  var self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return lineStart;\n  }\n  /** @type {State} */\n\n\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","mathFlow","tokenize","tokenizeMathFenced","concrete","nonLazyLine","tokenizeNonLazyLine","partial","effects","ok","nok","self","tail","events","length","initialSize","type","sliceSerialize","sizeOpen","start","code","enter","sequenceOpen","consume","exit","metaOpen","openAfter","contentType","meta","interrupt","contentStart","after","attempt","tokenizeClosingFence","contentContinue","size","closingPrefixAfter","closingSequence","closingSequenceEnd","lineStart","parser","lazy","now","line"],"sources":["D:/web/silly/silly/node_modules/micromark-extension-math/lib/math-flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const mathFlow = {\n  tokenize: tokenizeMathFenced,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nonLazyLine = {\n  tokenize: tokenizeNonLazyLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeMathFenced(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  const initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('mathFlow')\n    effects.enter('mathFlowFence')\n    effects.enter('mathFlowFenceSequence')\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === 36) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('mathFlowFenceSequence')\n    return sizeOpen < 2\n      ? nok(code)\n      : factorySpace(effects, metaOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function metaOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('mathFlowFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('mathFlowFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 36) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('mathFlowFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          {\n            tokenize: tokenizeClosingFence,\n            partial: true\n          },\n          after,\n          initialSize\n            ? factorySpace(effects, contentStart, 'linePrefix', initialSize + 1)\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('mathFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('mathFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('mathFlow')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(effects, closingPrefixAfter, 'linePrefix', 4)\n    /** @type {State} */\n\n    function closingPrefixAfter(code) {\n      effects.enter('mathFlowFence')\n      effects.enter('mathFlowFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === 36) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('mathFlowFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('mathFlowFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNonLazyLine(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}