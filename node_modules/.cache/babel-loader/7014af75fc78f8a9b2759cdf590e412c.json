{"ast":null,"code":"/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} Options\n * @typedef {import('hast-util-raw')} DoNotTouchAsThisImportIncludesRawInTree\n */\nimport { raw } from 'hast-util-raw';\n/**\n * Plugin to parse the tree again (and raw nodes).\n * Keeping positional info OK.  ðŸ™Œ\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}\n */\n\nexport default function rehypeRaw() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (tree, file) {\n    // Assume that when a root was given, itâ€™s also returned.\n    var result =\n    /** @type {Root} */\n    raw(tree, file, options);\n    return result;\n  };\n}","map":{"version":3,"names":["raw","rehypeRaw","options","tree","file","result"],"sources":["D:/web/silly/silly/node_modules/rehype-raw/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} Options\n * @typedef {import('hast-util-raw')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {raw} from 'hast-util-raw'\n\n/**\n * Plugin to parse the tree again (and raw nodes).\n * Keeping positional info OK.  ðŸ™Œ\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}\n */\nexport default function rehypeRaw(options = {}) {\n  return (tree, file) => {\n    // Assume that when a root was given, itâ€™s also returned.\n    const result = /** @type {Root} */ (raw(tree, file, options))\n    return result\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,GAAR,QAAkB,eAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,GAAiC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAC9C,OAAO,UAACC,IAAD,EAAOC,IAAP,EAAgB;IACrB;IACA,IAAMC,MAAM;IAAG;IAAqBL,GAAG,CAACG,IAAD,EAAOC,IAAP,EAAaF,OAAb,CAAvC;IACA,OAAOG,MAAP;EACD,CAJD;AAKD"},"metadata":{},"sourceType":"module"}